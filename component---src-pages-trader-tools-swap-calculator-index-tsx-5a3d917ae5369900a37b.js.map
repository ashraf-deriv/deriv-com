{"version":3,"file":"component---src-pages-trader-tools-swap-calculator-index-tsx-5a3d917ae5369900a37b.js","mappings":"6RAkGMA,EAAc,SAAC,GAAD,IAChBC,EADgB,EAChBA,OACAC,EAFgB,EAEhBA,cACAC,EAHgB,EAGhBA,QACAC,EAJgB,EAIhBA,OACAC,EALgB,EAKhBA,WACAC,EANgB,EAMhBA,cACAC,EAPgB,EAOhBA,gBAPgB,OAShB,wBAAC,KAAD,CACIC,KAAK,SACLC,MAAOR,EAAOS,OACdC,SAAU,SAACF,GACPP,EAAc,SAAUO,MAG3B,gBAAGG,EAAH,EAAGA,MAAH,OACG,wBAAC,IAAD,iBACQA,EADR,CAEIC,GAAG,SACHC,KAAK,OACLC,OAAOC,EAAAA,EAAAA,IAAS,UAChBC,aAAa,MACbC,MAAOf,EAAQO,QAAUN,EAAOM,OAChCS,OAAQd,EACR,gBAAc,OACde,YAAa,SAACC,GACVnB,EAAc,SAAU,IAAI,GAC5BI,EAAc,SAAU,IACxBC,EAAgB,UAAU,GAAO,GACjCc,EAAcC,SAElBC,WAAWC,EAAAA,EAAAA,IAAavB,EAAOS,OAAQ,GACvCe,WAAW,eAMrBC,EAAgB,SAAC,GAAD,IAClBzB,EADkB,EAClBA,OACAC,EAFkB,EAElBA,cACAC,EAHkB,EAGlBA,QACAC,EAJkB,EAIlBA,OACAC,EALkB,EAKlBA,WACAC,EANkB,EAMlBA,cACAC,EAPkB,EAOlBA,gBAPkB,OASlB,wBAAC,KAAD,CACIC,KAAK,WACLC,MAAOR,EAAO0B,SACdhB,SAAU,SAACF,GACPP,EAAc,WAAYO,MAG7B,gBAAGG,EAAH,EAAGA,MAAH,OACG,wBAAC,IAAD,iBACQA,EADR,CAEIC,GAAG,WACHC,KAAK,OACLL,MAAOR,EAAO0B,SACdZ,OAAOC,EAAAA,EAAAA,IAAS,aAChBC,aAAa,MACbC,MAAOf,EAAQwB,UAAYvB,EAAOuB,SAClCR,OAAQd,EACR,gBAAc,OACde,YAAa,SAACC,GACVnB,EAAc,WAAY,IAAI,GAC9BI,EAAc,WAAY,IAC1BC,EAAgB,YAAY,GAAO,GACnCc,EAAcC,SAElBC,WAAWC,EAAAA,EAAAA,IAAavB,EAAO0B,SAAU,IACzCF,WAAW,eAMrBG,EAA+B,SAAC1B,GAAD,OAAmB,SAACO,GACrDP,EAAc,gBAAgB2B,EAAAA,EAAAA,IAAYpB,IAC1CP,EAAc,gBAAgB4B,EAAAA,EAAAA,IAAgBrB,IAC9CP,EAAc,SAAUO,KAGtBsB,GAAmBC,EAAAA,EAAAA,SAAOC,EAAAA,IAAV,yFAAGD,CAAH,eAskBtB,EAlkBuB,WACnB,IAsBME,GAAOC,EAAAA,EAAAA,gBAtBC,cAwBd,GAAsBC,EAAAA,EAAAA,UAAS,aAAxBC,EAAP,KAAYC,EAAZ,KAEMC,EAAa,SAACC,GAChBF,EAAOE,IAGX,OACI,gDACI,wBAAC,KAAD,KACI,wBAAC,KAAD,CAAMC,GAAG,aAAaC,GAAG,UACrB,wBAAC,KAAD,CAAmBC,GAAG,iBAAiBC,MAAM,WACxC5B,EAAAA,EAAAA,IAAS,mBAEd,+BACI6B,IAAKC,EAAAA,EACLC,KAAK/B,EAAAA,EAAAA,IAAS,eACdgC,OAAO,KACPC,MAAM,KACNC,MAAO,CAAEC,OAAQ,WAErB,wBAAC,KAAD,MAAOnC,EAAAA,EAAAA,IAAS,sBAGxB,wBAAC,KAAD,CAAeoC,UAAU,UACrB,wBAAC,KAAD,CAAiBC,GAAG,KAAKvC,KAAK,oBAAoBwC,MAAM,SAASC,OAAO,WACnEvC,EAAAA,EAAAA,IACG,mIAIR,wBAAC,KAAD,CAAMwC,GAAG,OAAOC,GAAG,OAAOC,OAAQ,CAAEF,GAAI,OAAQC,GAAI,SAChD,wBAAC,KAAD,CACIE,OAAgB,cAARtB,EACRuB,QAAS,kBAAMrB,EAAW,eAE1B,wBAAC,KAAD,CAAMsB,KAAK,qBAAqBP,MAAM,WACjCtC,EAAAA,EAAAA,IAAS,eAGlB,wBAAC,KAAD,CAAiB2C,OAAgB,SAARtB,EAAgBuB,QAAS,kBAAMrB,EAAW,UAC/D,wBAAC,KAAD,CAAMsB,KAAK,qBAAqBP,MAAM,WACjCtC,EAAAA,EAAAA,IAAS,gBAKb,cAARqB,EACG,gDACI,wBAAC,KAAD,CAAkBoB,GAAG,UACjB,wBAAC,KAAD,KACI,wBAAC,KAAD,CACIK,oBAAkB,EAClBC,cAAe,CACXC,WAAY,EACZC,iBAAkB,MAClBC,OAAQ,GACRxD,OAAQ,GACRyD,WAAYC,EAAAA,GACZC,aAAc,GACd1C,SAAU,GACV2C,WAAY,IAEhBC,SAAUC,EAAAA,GACVC,SAAU,SAACxE,EAAD,GAA+B,IAApBC,EAAoB,EAApBA,cACjBA,EAAc,cAAcwE,EAAAA,EAAAA,IAAuBzE,IACnDC,EAAc,UAAUyE,EAAAA,EAAAA,IAAmB1E,EAAOS,SAClDR,EACI,YACA0E,EAAAA,EAAAA,IAA2B3E,EAAO0B,WAEtCzB,EACI,cACAyE,EAAAA,EAAAA,IAAmB1E,EAAOqE,gBAIjC,gBACGrE,EADH,EACGA,OACAC,EAFH,EAEGA,cACAG,EAHH,EAGGA,WACAD,EAJH,EAIGA,OACAD,EALH,EAKGA,QACAG,EANH,EAMGA,cACAC,EAPH,EAOGA,gBACAsE,EARH,EAQGA,QACAC,EATH,EASGA,MATH,OAWG,wBAAC,KAAD,KACI,wBAAC,KAAD,KACI,wBAAC,KAAD,CAAiBC,QAAQ,YACpB/D,EAAAA,EAAAA,IAAS,gBAEd,wBAAC,KAAD,KACI,wBAAC,KAAD,KACKf,EAAO+D,YAEZ,wBAAC,KAAD,KACK/D,EAAOgE,oBAKpB,wBAAC,KAAD,KACI,wBAAC,KAAD,CACIR,GAAG,SACHuB,YAAa/E,EAAOkE,WACpBpD,OAAOC,EAAAA,EAAAA,IAAS,UAChBiE,eAAgBC,EAAAA,GAChBC,gBAAiBlF,EAAOiE,OACxBrD,GAAG,SACHF,SAAUiB,EACN1B,GAEJmE,aAAcpE,EAAOoE,aACrBnD,MAAOf,EAAQ+D,QAAU9D,EAAO8D,OAChC/C,OAAQd,IAGZ,wBAAC,KAAD,KACI,wBAACL,EAAD,CACIC,OAAQA,EACRC,cAAeA,EACfC,QAASA,EACTC,OAAQA,EACRC,WAAYA,EACZC,cAAeA,EACfC,gBAAiBA,KAIzB,wBAAC,KAAD,KACI,wBAAC,KAAD,CACIC,KAAK,aACLC,MAAOR,EAAOqE,WACd3D,SAAU,SAACF,GACPP,EAAc,aAAcO,MAG/B,gBAAGG,EAAH,EAAGA,MAAH,OACG,wBAAC,IAAD,iBACQA,EADR,CAEIC,GAAG,QACHC,KAAK,OACLL,MAAOR,EAAOqE,WACdvD,OAAOC,EAAAA,EAAAA,IAAS,eAChBC,aAAa,MACbC,MACIf,EAAQmE,YACRlE,EAAOkE,WAEXnD,OAAQd,EACR,gBAAc,OACde,YAAa,SAACC,GACVnB,EACI,aACA,IACA,GAEJI,EAAc,aAAc,IAC5BC,EACI,cACA,GACA,GAEJc,EAAcC,SAElBC,WAAWC,EAAAA,EAAAA,IACPvB,EAAOqE,WACP,IAEJ7C,WAAW,eAM3B,wBAACM,EAAD,KACI,wBAACL,EAAD,CACIzB,OAAQA,EACRC,cAAeA,EACfC,QAASA,EACTC,OAAQA,EACRC,WAAYA,EACZC,cAAeA,EACfC,gBAAiBA,KAGzB,wBAAC,KAAD,CAAMiD,GAAG,UACL,wBAAC,KAAD,CACI4B,WAAS,EACTtE,KAAK,SACLuE,UAAWR,IAAYC,IAEtB9D,EAAAA,EAAAA,IAAS,qBAStC,wBAAC,KAAD,KACI,wBAAC,KAAD,CAAQqC,GAAG,KAAKvC,KAAK,gBAAgB2C,GAAG,QACnCzC,EAAAA,EAAAA,IAAS,kCAGd,wBAAC,KAAD,KACI,wBAAC,KAAD,CAAUsE,eAAe,yHAE7B,wBAAC,KAAD,CAAM7B,GAAG,QACL,wBAAC,KAAD,CACI6B,eAAe,sFACfC,WAAY,CAAC,kCAAQC,IAAK,QAIlC,wBAAC,KAAD,CAAM/B,GAAG,QACL,wBAAC,KAAD,CAAU6B,eAAe,4CAG7B,wBAAC,KAAD,CAAQjC,GAAG,KAAKvC,KAAK,gBAAgB2C,GAAG,SACnCzC,EAAAA,EAAAA,IAAS,wBAGd,wBAAC,KAAD,CAAWyE,kBAAgB,GACvB,wBAAC,KAAD,CACIC,QAAQ1E,EAAAA,EAAAA,IAAS,eACjB2E,aAAcA,EAAAA,GACdzC,MAAO0C,EAAAA,GACPC,MAAI,GAEJ,wBAAC,KAAD,CAAMpC,GAAG,SACJzC,EAAAA,EAAAA,IACG,6IAIR,wBAAC,aAAD,KACI,wBAAC,KAAD,CACIkB,KAAMA,EAAK4D,uBACX/C,KAAK/B,EAAAA,EAAAA,IAAS,6BAGtB,wBAAC,YAAD,KACI,wBAAC,KAAD,CACIkB,KAAMA,EAAK6D,8BACXhD,KAAK/B,EAAAA,EAAAA,IAAS,oCAGtB,wBAAC,KAAD,KACI,wBAAC,KAAD,KACI,kCACI,oCACI,wBAAC,KAAD,CAAUsE,eAAe,uEAGjC,kCACI,oCACI,wBAAC,KAAD,CAAUA,eAAe,2IAMzC,wBAAC,KAAD,CAAM9B,GAAG,UACL,wBAAC,KAAD,CACI8B,eAAe,gGACfC,WAAY,CAAC,kCAAQC,IAAK,UAM1C,wBAAC,KAAD,CAAaxC,OAAO,QAEZ,wBAAC,KAAD,CACIgD,SAAS,OACTlF,KAAK,MACLmF,SAAS,OACTC,OAAO,SACPC,IAAI,wBAEHnF,EAAAA,EAAAA,IAAS,8BAId,wBAAC,KAAD,CAAkBoE,UAAU,OAAOzC,GAAG,uBACjC3B,EAAAA,EAAAA,IAAS,8BAQlC,gDACI,wBAAC,KAAD,CAAkByC,GAAG,UACjB,wBAAC,KAAD,KACI,wBAAC,KAAD,CACIK,oBAAkB,EAClBC,cAAe,CACXC,WAAY,EACZC,iBAAkB,MAClBC,OAAQ,GACRxD,OAAQ,GACRyD,WAAYiC,EAAAA,GACZ/B,aAAc,GACd1C,SAAU,GACV0E,WAAY,IAEhB9B,SAAU+B,EAAAA,GACV7B,SAAU,SAACxE,EAAD,GAA+B,IAApBC,EAAoB,EAApBA,cACjBA,EAAc,cAAcqG,EAAAA,EAAAA,IAAmBtG,IAC/CC,EAAc,UAAUyE,EAAAA,EAAAA,IAAmB1E,EAAOS,SAClDR,EACI,YACA0E,EAAAA,EAAAA,IAA2B3E,EAAO0B,WAEtCzB,EACI,cACAyE,EAAAA,EAAAA,IAAmB1E,EAAOoG,gBAIjC,gBACGpG,EADH,EACGA,OACAC,EAFH,EAEGA,cACAG,EAHH,EAGGA,WACAD,EAJH,EAIGA,OACAD,EALH,EAKGA,QACA0E,EANH,EAMGA,QACAC,EAPH,EAOGA,MACAvE,EARH,EAQGA,gBACAD,EATH,EASGA,cATH,OAWG,wBAAC,KAAD,KACI,wBAAC,KAAD,KACI,wBAAC,KAAD,CAAiByE,QAAQ,YACpB/D,EAAAA,EAAAA,IAAS,gBAEd,wBAAC,KAAD,KACI,wBAAC,KAAD,KACKf,EAAO+D,YAEZ,wBAAC,KAAD,KACK/D,EAAOgE,oBAKpB,wBAAC,KAAD,KACI,wBAAC,KAAD,CACIR,GAAG,SACHwB,eAAgBC,EAAAA,GAChBF,YAAa/E,EAAOkE,WACpBpD,OAAOC,EAAAA,EAAAA,IAAS,UAChBmE,gBAAiBlF,EAAOiE,OACxBrD,GAAG,SACHF,SAAUiB,EACN1B,GAEJmE,aAAcpE,EAAOoE,aACrBnD,MAAOf,EAAQ+D,QAAU9D,EAAO8D,OAChC/C,OAAQd,IAEZ,wBAAC,KAAD,KACI,wBAACL,EAAD,CACIC,OAAQA,EACRC,cAAeA,EACfC,QAASA,EACTC,OAAQA,EACRC,WAAYA,EACZC,cAAeA,EACfC,gBAAiBA,KAIzB,wBAAC,KAAD,KACI,wBAAC,KAAD,CACIC,KAAK,aACLC,MAAOR,EAAOoG,WACd1F,SAAU,SAACF,GACPP,EAAc,aAAcO,MAG/B,gBAAGG,EAAH,EAAGA,MAAH,OACG,wBAAC,IAAD,iBACQA,EADR,CAEIC,GAAG,aACHC,KAAK,OACLL,MAAOR,EAAOoG,WACdtF,OAAOC,EAAAA,EAAAA,IAAS,eAChBC,aAAa,MACbC,MACIf,EAAQkG,YACRjG,EAAOiG,WAEXlF,OAAQd,EACR,gBAAc,OACde,YAAa,SAACC,GACVnB,EACI,aACA,IACA,GAEJI,EAAc,aAAc,IAC5BC,EACI,cACA,GACA,GAEJc,EAAcC,SAElBC,WAAWC,EAAAA,EAAAA,IACPvB,EAAOoG,WACP,IAEJ5E,WAAW,eAM3B,wBAACM,EAAD,KACI,wBAACL,EAAD,CACIzB,OAAQA,EACRC,cAAeA,EACfC,QAASA,EACTC,OAAQA,EACRC,WAAYA,EACZC,cAAeA,EACfC,gBAAiBA,KAGzB,wBAAC,KAAD,CAAMiD,GAAG,UACL,wBAAC,KAAD,CACI4B,WAAS,EACTtE,KAAK,SACLuE,UAAWR,IAAYC,IAEtB9D,EAAAA,EAAAA,IAAS,qBAStC,wBAAC,KAAD,KACI,wBAAC,KAAD,CAAQqC,GAAG,KAAKvC,KAAK,gBAAgB2C,GAAG,QACnCzC,EAAAA,EAAAA,IAAS,kCAGd,wBAAC,KAAD,KACI,wBAAC,KAAD,CAAUsE,eAAe,yEAE7B,wBAAC,KAAD,CAAM7B,GAAG,QACL,wBAAC,KAAD,CACI6B,eAAe,wEACfC,WAAY,CAAC,kCAAQC,IAAK,QAIlC,wBAAC,KAAD,CAAM/B,GAAG,QACL,wBAAC,KAAD,CAAU6B,eAAe,2IAG7B,wBAAC,KAAD,CAAM7B,GAAG,QACL,wBAAC,KAAD,CAAU6B,eAAe,iTAG7B,wBAAC,KAAD,CAAQjC,GAAG,KAAKvC,KAAK,gBAAgB2C,GAAG,SACnCzC,EAAAA,EAAAA,IAAS,wBAGd,wBAAC,KAAD,CAAWyE,kBAAgB,GACvB,wBAAC,KAAD,CACIC,QAAQ1E,EAAAA,EAAAA,IAAS,eACjB2E,aAAcA,EAAAA,GACdzC,MAAO0C,EAAAA,GACPC,MAAI,GAEJ,wBAAC,KAAD,CAAMpC,GAAG,SACJzC,EAAAA,EAAAA,IACG,4HAIR,wBAAC,aAAD,KACI,wBAAC,KAAD,CACIkB,KAAMA,EAAKsE,mBACXzD,KAAK/B,EAAAA,EAAAA,IAAS,yBAGtB,wBAAC,YAAD,KACI,wBAAC,KAAD,CACIkB,KAAMA,EAAKuE,0BACX1D,KAAK/B,EAAAA,EAAAA,IAAS,gCAGtB,wBAAC,KAAD,KACI,wBAAC,KAAD,KACI,kCACI,oCACI,wBAAC,KAAD,CAAUsE,eAAe,iDAGjC,kCACI,oCACI,wBAAC,KAAD,CAAUA,eAAe,wIAGjC,kCACI,oCACI,wBAAC,KAAD,CAAUA,eAAe,2IAMzC,wBAAC,KAAD,CAAM9B,GAAG,UACL,wBAAC,KAAD,CACI8B,eAAe,gGACfC,WAAY,CAAC,kCAAQC,IAAK,UAK1C,wBAAC,KAAD,CAAaxC,OAAO,QAChB,wBAAC,KAAD,CACIgD,SAAS,OACTlF,KAAK,MACLmF,SAAS,OACTC,OAAO,SACPC,IAAI,wBAEHnF,EAAAA,EAAAA,IAAS,8BAEd,wBAAC,KAAD,CAAkBoE,UAAU,OAAOzC,GAAG,uBACjC3B,EAAAA,EAAAA,IAAS,iC,WC1tBlD,GAAe0F,EAAAA,EAAAA,KAAf,EAfuB,WACnB,OACI,wBAAC,IAAD,KACI,wBAAC,KAAD,CAAKC,OAAO3F,EAAAA,EAAAA,IAAS,mBAAoB4F,aAAa5F,EAAAA,EAAAA,IAAS,qBAC/D,wBAAC,KAAD,CAAMyB,GAAG,SAASC,GAAG,UACjB,wBAAC,KAAD,KACI,wBAAC,KAAD,CAAQW,GAAG,KAAKvC,KAAK,gBAAgB8B,MAAM,QAAQU,MAAM,WACpDtC,EAAAA,EAAAA,IAAS,sBAItB,wBAAC,EAAD","sources":["webpack://deriv-com/./src/pages/trader-tools/swap-calculator/_swap-calculator.tsx","webpack://deriv-com/./src/pages/trader-tools/swap-calculator/index.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Formik, Field } from 'formik'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport styled from 'styled-components'\nimport {\n    getSwapChargeSynthetic,\n    getSwapChargeForex,\n    resetValidationSynthetic,\n    resetValidationForex,\n    getContractSize,\n    getCurrency,\n    numberSubmitFormatNegative,\n    numberSubmitFormat,\n    getMaxLength,\n} from '../common/_utility'\nimport {\n    optionItemDefault,\n    syntheticItemLists,\n    financialItemLists,\n} from '../common/_underlying-data'\nimport {\n    BreadCrumbContainer,\n    CalculateButton,\n    CalculatorBody,\n    CalculatorForm,\n    CalculatorHeader,\n    CalculatorLabel,\n    CalculatorOutputContainer,\n    CalculatorOutputField,\n    CalculatorOutputSymbol,\n    ContentContainer,\n    FormulaText,\n    header_style,\n    InputGroup,\n    item_style,\n    LinkWrapper,\n    RightContent,\n    SectionSubtitle,\n    StyledLinkButton,\n    StyledOl,\n    StyledSection,\n    SwapFormWrapper,\n    SwapTabSelector,\n} from '../common/_style'\nimport { localize, Localize } from 'components/localization'\nimport {\n    Accordion,\n    AccordionItem,\n    Dropdown,\n    Header,\n    LocalizedLinkText,\n    QueryImage,\n    Text,\n} from 'components/elements'\nimport { Flex, Show } from 'components/containers'\nimport Input from 'components/form/input'\nimport RightArrow from 'images/svg/tools/black-right-arrow.svg'\n\ntype FormikErrors<Values> = {\n    [K in keyof Values]?: Values[K] extends string[]\n        ? Values[K][number] extends Record<string, unknown>\n            ? FormikErrors<Values[K][number]>[] | string | string[]\n            : string | string[]\n        : Values[K] extends Record<string, unknown>\n        ? FormikErrors<Values[K]>\n        : string\n}\n\ntype FormikTouched<Values> = {\n    [K in keyof Values]?: Values[K] extends string[]\n        ? Values[K][number] extends Record<string, unknown>\n            ? FormikTouched<Values[K][number]>[]\n            : boolean\n        : Values[K] extends Record<string, unknown>\n        ? FormikTouched<Values[K]>\n        : boolean\n}\n\ntype FormikState<Values> = {\n    values: Values\n    setFieldValue: (field: string, value: string, shouldValidate?: boolean) => void\n    touched: FormikTouched<Values>\n    errors: FormikErrors<Values>\n    handleBlur: {\n        (e: React.FocusEvent<string>): void\n    }\n    setFieldError: (field: string, message: string | undefined) => void\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n}\n\ntype VolumeFieldProps = {\n    volume: string\n}\n\ntype SwapRateFieldProps = {\n    swapRate: string\n}\n\nconst VolumeField = ({\n    values,\n    setFieldValue,\n    touched,\n    errors,\n    handleBlur,\n    setFieldError,\n    setFieldTouched,\n}: FormikState<VolumeFieldProps>) => (\n    <Field\n        name=\"volume\"\n        value={values.volume}\n        onChange={(value) => {\n            setFieldValue('volume', value)\n        }}\n    >\n        {({ field }) => (\n            <Input\n                {...field}\n                id=\"volume\"\n                type=\"text\"\n                label={localize('Volume')}\n                autoComplete=\"off\"\n                error={touched.volume && errors.volume}\n                onBlur={handleBlur}\n                data-lpignore=\"true\"\n                handleError={(current_input) => {\n                    setFieldValue('volume', '', false)\n                    setFieldError('volume', '')\n                    setFieldTouched('volume', false, false)\n                    current_input.focus()\n                }}\n                maxLength={getMaxLength(values.volume, 8)}\n                background=\"white\"\n            />\n        )}\n    </Field>\n)\n\nconst SwapRateField = ({\n    values,\n    setFieldValue,\n    touched,\n    errors,\n    handleBlur,\n    setFieldError,\n    setFieldTouched,\n}: FormikState<SwapRateFieldProps>) => (\n    <Field\n        name=\"swapRate\"\n        value={values.swapRate}\n        onChange={(value) => {\n            setFieldValue('swapRate', value)\n        }}\n    >\n        {({ field }) => (\n            <Input\n                {...field}\n                id=\"swapRate\"\n                type=\"text\"\n                value={values.swapRate}\n                label={localize('Swap rate')}\n                autoComplete=\"off\"\n                error={touched.swapRate && errors.swapRate}\n                onBlur={handleBlur}\n                data-lpignore=\"true\"\n                handleError={(current_input) => {\n                    setFieldValue('swapRate', '', false)\n                    setFieldError('swapRate', '')\n                    setFieldTouched('swapRate', false, false)\n                    current_input.focus()\n                }}\n                maxLength={getMaxLength(values.swapRate, 15)}\n                background=\"white\"\n            />\n        )}\n    </Field>\n)\n\nconst swap_currency_change_handler = (setFieldValue) => (value) => {\n    setFieldValue('swapCurrency', getCurrency(value))\n    setFieldValue('contractSize', getContractSize(value))\n    setFieldValue('symbol', value)\n}\n\nconst StyledInputGroup = styled(InputGroup)`\n    margin: 0;\n`\n\nconst SwapCalculator = () => {\n    const query = graphql`\n        query {\n            swap_synthetic_formula: file(\n                relativePath: { eq: \"trade-tools/swap-synthetic-formula.png\" }\n            ) {\n                ...fadeIn\n            }\n            swap_forex_formula: file(relativePath: { eq: \"trade-tools/swap-forex-formula.png\" }) {\n                ...fadeIn\n            }\n            swap_synthetic_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/swap-synthetic-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n            swap_forex_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/swap-forex-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n        }\n    `\n    const data = useStaticQuery(query)\n\n    const [tab, setTab] = useState('Synthetic')\n\n    const onTabClick = (t) => {\n        setTab(t)\n    }\n\n    return (\n        <>\n            <BreadCrumbContainer>\n                <Flex jc=\"flex-start\" ai=\"center\">\n                    <LocalizedLinkText to=\"/trader-tools/\" color=\"grey-5\">\n                        {localize(\"Traders' tools\")}\n                    </LocalizedLinkText>\n                    <img\n                        src={RightArrow}\n                        alt={localize('right arrow')}\n                        height=\"16\"\n                        width=\"16\"\n                        style={{ margin: '0 8px' }}\n                    />\n                    <Text>{localize('Swap calculator')}</Text>\n                </Flex>\n            </BreadCrumbContainer>\n            <StyledSection direction=\"column\">\n                <SectionSubtitle as=\"h3\" type=\"sub-section-title\" align=\"center\" weight=\"normal\">\n                    {localize(\n                        'Our swap calculator helps you to estimate the swap charges required to keep your positions open overnight on Deriv MT5 (DMT5).',\n                    )}\n                </SectionSubtitle>\n\n                <Flex mt=\"80px\" mb=\"40px\" tablet={{ mt: '40px', mb: '24px' }}>\n                    <SwapTabSelector\n                        active={tab === 'Synthetic'}\n                        onClick={() => onTabClick('Synthetic')}\n                    >\n                        <Text size=\"var(--text-size-m)\" align=\"center\">\n                            {localize('Synthetic')}\n                        </Text>\n                    </SwapTabSelector>\n                    <SwapTabSelector active={tab === 'Real'} onClick={() => onTabClick('Real')}>\n                        <Text size=\"var(--text-size-m)\" align=\"center\">\n                            {localize('Financial')}\n                        </Text>\n                    </SwapTabSelector>\n                </Flex>\n\n                {tab === 'Synthetic' ? (\n                    <>\n                        <ContentContainer mb=\"4.0rem\">\n                            <SwapFormWrapper>\n                                <Formik\n                                    enableReinitialize\n                                    initialValues={{\n                                        swapCharge: 0,\n                                        swapChargeSymbol: 'USD',\n                                        symbol: '',\n                                        volume: '',\n                                        optionList: syntheticItemLists,\n                                        contractSize: '',\n                                        swapRate: '',\n                                        assetPrice: '',\n                                    }}\n                                    validate={resetValidationSynthetic}\n                                    onSubmit={(values, { setFieldValue }) => {\n                                        setFieldValue('swapCharge', getSwapChargeSynthetic(values))\n                                        setFieldValue('volume', numberSubmitFormat(values.volume))\n                                        setFieldValue(\n                                            'swapRate',\n                                            numberSubmitFormatNegative(values.swapRate),\n                                        )\n                                        setFieldValue(\n                                            'assetPrice',\n                                            numberSubmitFormat(values.assetPrice),\n                                        )\n                                    }}\n                                >\n                                    {({\n                                        values,\n                                        setFieldValue,\n                                        handleBlur,\n                                        errors,\n                                        touched,\n                                        setFieldError,\n                                        setFieldTouched,\n                                        isValid,\n                                        dirty,\n                                    }) => (\n                                        <CalculatorForm>\n                                            <CalculatorHeader>\n                                                <CalculatorLabel htmlFor=\"message\">\n                                                    {localize('Swap charge')}\n                                                </CalculatorLabel>\n                                                <CalculatorOutputContainer>\n                                                    <CalculatorOutputField>\n                                                        {values.swapCharge}\n                                                    </CalculatorOutputField>\n                                                    <CalculatorOutputSymbol>\n                                                        {values.swapChargeSymbol}\n                                                    </CalculatorOutputSymbol>\n                                                </CalculatorOutputContainer>\n                                            </CalculatorHeader>\n\n                                            <CalculatorBody>\n                                                <Dropdown\n                                                    mb=\"3.6rem\"\n                                                    option_list={values.optionList}\n                                                    label={localize('Symbol')}\n                                                    default_option={optionItemDefault}\n                                                    selected_option={values.symbol}\n                                                    id=\"symbol\"\n                                                    onChange={swap_currency_change_handler(\n                                                        setFieldValue,\n                                                    )}\n                                                    contractSize={values.contractSize}\n                                                    error={touched.symbol && errors.symbol}\n                                                    onBlur={handleBlur}\n                                                />\n\n                                                <InputGroup>\n                                                    <VolumeField\n                                                        values={values}\n                                                        setFieldValue={setFieldValue}\n                                                        touched={touched}\n                                                        errors={errors}\n                                                        handleBlur={handleBlur}\n                                                        setFieldError={setFieldError}\n                                                        setFieldTouched={setFieldTouched}\n                                                    />\n                                                </InputGroup>\n\n                                                <InputGroup>\n                                                    <Field\n                                                        name=\"assetPrice\"\n                                                        value={values.assetPrice}\n                                                        onChange={(value) => {\n                                                            setFieldValue('assetPrice', value)\n                                                        }}\n                                                    >\n                                                        {({ field }) => (\n                                                            <Input\n                                                                {...field}\n                                                                id=\"asset\"\n                                                                type=\"text\"\n                                                                value={values.assetPrice}\n                                                                label={localize('Asset price')}\n                                                                autoComplete=\"off\"\n                                                                error={\n                                                                    touched.assetPrice &&\n                                                                    errors.assetPrice\n                                                                }\n                                                                onBlur={handleBlur}\n                                                                data-lpignore=\"true\"\n                                                                handleError={(current_input) => {\n                                                                    setFieldValue(\n                                                                        'assetPrice',\n                                                                        '',\n                                                                        false,\n                                                                    )\n                                                                    setFieldError('assetPrice', '')\n                                                                    setFieldTouched(\n                                                                        'assetPrice',\n                                                                        false,\n                                                                        false,\n                                                                    )\n                                                                    current_input.focus()\n                                                                }}\n                                                                maxLength={getMaxLength(\n                                                                    values.assetPrice,\n                                                                    15,\n                                                                )}\n                                                                background=\"white\"\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </InputGroup>\n\n                                                <StyledInputGroup>\n                                                    <SwapRateField\n                                                        values={values}\n                                                        setFieldValue={setFieldValue}\n                                                        touched={touched}\n                                                        errors={errors}\n                                                        handleBlur={handleBlur}\n                                                        setFieldError={setFieldError}\n                                                        setFieldTouched={setFieldTouched}\n                                                    />\n                                                </StyledInputGroup>\n                                                <Flex mt=\"1.5rem\">\n                                                    <CalculateButton\n                                                        secondary\n                                                        type=\"submit\"\n                                                        disabled={!isValid || !dirty}\n                                                    >\n                                                        {localize('Calculate')}\n                                                    </CalculateButton>\n                                                </Flex>\n                                            </CalculatorBody>\n                                        </CalculatorForm>\n                                    )}\n                                </Formik>\n                            </SwapFormWrapper>\n\n                            <RightContent>\n                                <Header as=\"h3\" type=\"section-title\" mb=\"8px\">\n                                    {localize('How to calculate swap charges')}\n                                </Header>\n\n                                <Text>\n                                    <Localize translate_text=\"For synthetic, the swap charge is calculated on an annual basis for long and short positions based on this formula:\" />\n                                </Text>\n                                <Text mb=\"2rem\">\n                                    <Localize\n                                        translate_text=\"<0>Swap charge = volume × contract size × asset price × (swap rate ÷ 100) ÷ 360</0>\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n\n                                <Text mb=\"2rem\">\n                                    <Localize translate_text=\"This gives you the swap charge in USD.\" />\n                                </Text>\n\n                                <Header as=\"h3\" type=\"section-title\" mb=\"16px\">\n                                    {localize('Example calculation')}\n                                </Header>\n\n                                <Accordion has_single_state>\n                                    <AccordionItem\n                                        header={localize('Swap charge')}\n                                        header_style={header_style}\n                                        style={item_style}\n                                        plus\n                                    >\n                                        <Text mb=\"2rem\">\n                                            {localize(\n                                                'Let’s say you want to keep 0.01 lots of Volatility 75 Index with an asset price of 400,000 USD and swap rate of -7.5 open for one night.',\n                                            )}\n                                        </Text>\n\n                                        <Show.Desktop>\n                                            <QueryImage\n                                                data={data.swap_synthetic_formula}\n                                                alt={localize('swap synthetic formula')}\n                                            />\n                                        </Show.Desktop>\n                                        <Show.Mobile>\n                                            <QueryImage\n                                                data={data.swap_synthetic_formula_mobile}\n                                                alt={localize('swap synthetic formula mobile')}\n                                            />\n                                        </Show.Mobile>\n                                        <FormulaText>\n                                            <StyledOl>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"The contract size is one standard lot of Volatility 75 Index = 1\" />\n                                                    </span>\n                                                </li>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"If the swap rate is positive, your account will be credited with the swap amount. If it is negative, your account will be debited.\" />\n                                                    </span>\n                                                </li>\n                                            </StyledOl>\n                                        </FormulaText>\n\n                                        <Text mt=\"1.6rem\">\n                                            <Localize\n                                                translate_text=\"So you will require a swap charge of <0>0.83 USD</0> to keep the position open for one night.\"\n                                                components={[<strong key={0} />]}\n                                            />\n                                        </Text>\n                                    </AccordionItem>\n                                </Accordion>\n\n                                <LinkWrapper height=\"auto\">\n                                    {\n                                        <StyledLinkButton\n                                            tertiary=\"true\"\n                                            type=\"mt5\"\n                                            external=\"true\"\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            {localize('Go to Deriv MT5 dashboard')}\n                                        </StyledLinkButton>\n                                    }\n                                    {\n                                        <StyledLinkButton secondary=\"true\" to=\"/trade-types/cfds/\">\n                                            {localize('Learn more about swap')}\n                                        </StyledLinkButton>\n                                    }\n                                </LinkWrapper>\n                            </RightContent>\n                        </ContentContainer>\n                    </>\n                ) : (\n                    <>\n                        <ContentContainer mb=\"2.0rem\">\n                            <SwapFormWrapper>\n                                <Formik\n                                    enableReinitialize\n                                    initialValues={{\n                                        swapCharge: 0,\n                                        swapChargeSymbol: 'USD',\n                                        symbol: '',\n                                        volume: '',\n                                        optionList: financialItemLists,\n                                        contractSize: '',\n                                        swapRate: '',\n                                        pointValue: '',\n                                    }}\n                                    validate={resetValidationForex}\n                                    onSubmit={(values, { setFieldValue }) => {\n                                        setFieldValue('swapCharge', getSwapChargeForex(values))\n                                        setFieldValue('volume', numberSubmitFormat(values.volume))\n                                        setFieldValue(\n                                            'swapRate',\n                                            numberSubmitFormatNegative(values.swapRate),\n                                        )\n                                        setFieldValue(\n                                            'pointValue',\n                                            numberSubmitFormat(values.pointValue),\n                                        )\n                                    }}\n                                >\n                                    {({\n                                        values,\n                                        setFieldValue,\n                                        handleBlur,\n                                        errors,\n                                        touched,\n                                        isValid,\n                                        dirty,\n                                        setFieldTouched,\n                                        setFieldError,\n                                    }) => (\n                                        <CalculatorForm>\n                                            <CalculatorHeader>\n                                                <CalculatorLabel htmlFor=\"message\">\n                                                    {localize('Swap charge')}\n                                                </CalculatorLabel>\n                                                <CalculatorOutputContainer>\n                                                    <CalculatorOutputField>\n                                                        {values.swapCharge}\n                                                    </CalculatorOutputField>\n                                                    <CalculatorOutputSymbol>\n                                                        {values.swapChargeSymbol}\n                                                    </CalculatorOutputSymbol>\n                                                </CalculatorOutputContainer>\n                                            </CalculatorHeader>\n\n                                            <CalculatorBody>\n                                                <Dropdown\n                                                    mb=\"3.6rem\"\n                                                    default_option={optionItemDefault}\n                                                    option_list={values.optionList}\n                                                    label={localize('Symbol')}\n                                                    selected_option={values.symbol}\n                                                    id=\"symbol\"\n                                                    onChange={swap_currency_change_handler(\n                                                        setFieldValue,\n                                                    )}\n                                                    contractSize={values.contractSize}\n                                                    error={touched.symbol && errors.symbol}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <InputGroup>\n                                                    <VolumeField\n                                                        values={values}\n                                                        setFieldValue={setFieldValue}\n                                                        touched={touched}\n                                                        errors={errors}\n                                                        handleBlur={handleBlur}\n                                                        setFieldError={setFieldError}\n                                                        setFieldTouched={setFieldTouched}\n                                                    />\n                                                </InputGroup>\n\n                                                <InputGroup>\n                                                    <Field\n                                                        name=\"pointValue\"\n                                                        value={values.pointValue}\n                                                        onChange={(value) => {\n                                                            setFieldValue('pointValue', value)\n                                                        }}\n                                                    >\n                                                        {({ field }) => (\n                                                            <Input\n                                                                {...field}\n                                                                id=\"pointValue\"\n                                                                type=\"text\"\n                                                                value={values.pointValue}\n                                                                label={localize('Point value')}\n                                                                autoComplete=\"off\"\n                                                                error={\n                                                                    touched.pointValue &&\n                                                                    errors.pointValue\n                                                                }\n                                                                onBlur={handleBlur}\n                                                                data-lpignore=\"true\"\n                                                                handleError={(current_input) => {\n                                                                    setFieldValue(\n                                                                        'pointValue',\n                                                                        '',\n                                                                        false,\n                                                                    )\n                                                                    setFieldError('pointValue', '')\n                                                                    setFieldTouched(\n                                                                        'pointValue',\n                                                                        false,\n                                                                        false,\n                                                                    )\n                                                                    current_input.focus()\n                                                                }}\n                                                                maxLength={getMaxLength(\n                                                                    values.pointValue,\n                                                                    15,\n                                                                )}\n                                                                background=\"white\"\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </InputGroup>\n\n                                                <StyledInputGroup>\n                                                    <SwapRateField\n                                                        values={values}\n                                                        setFieldValue={setFieldValue}\n                                                        touched={touched}\n                                                        errors={errors}\n                                                        handleBlur={handleBlur}\n                                                        setFieldError={setFieldError}\n                                                        setFieldTouched={setFieldTouched}\n                                                    />\n                                                </StyledInputGroup>\n                                                <Flex mt=\"1.5rem\">\n                                                    <CalculateButton\n                                                        secondary\n                                                        type=\"submit\"\n                                                        disabled={!isValid || !dirty}\n                                                    >\n                                                        {localize('Calculate')}\n                                                    </CalculateButton>\n                                                </Flex>\n                                            </CalculatorBody>\n                                        </CalculatorForm>\n                                    )}\n                                </Formik>\n                            </SwapFormWrapper>\n\n                            <RightContent>\n                                <Header as=\"h3\" type=\"section-title\" mb=\"8px\">\n                                    {localize('How to calculate swap charges')}\n                                </Header>\n\n                                <Text>\n                                    <Localize translate_text=\"For financial, the swap charge is calculated based on this formula:\" />\n                                </Text>\n                                <Text mb=\"2rem\">\n                                    <Localize\n                                        translate_text=\"<0>Swap charge = volume × contract size × point value × swap rate</0>\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n\n                                <Text mb=\"2rem\">\n                                    <Localize translate_text=\"This gives you the swap charge in the quote currency for forex pairs, or in the denomination of the underlying asset for commodities.\" />\n                                </Text>\n\n                                <Text mb=\"2rem\">\n                                    <Localize translate_text=\"For instance, if you are trading the USD/JPY forex pair, the swap charge will be computed in Japanese Yen (JPY) which is the quote currency. On the other hand, if you are trading oil,  then the swap charge will be computed in US Dollar (USD), which is the denomination of the underlying asset – oil.\" />\n                                </Text>\n\n                                <Header as=\"h3\" type=\"section-title\" mb=\"16px\">\n                                    {localize('Example calculation')}\n                                </Header>\n\n                                <Accordion has_single_state>\n                                    <AccordionItem\n                                        header={localize('Swap charge')}\n                                        header_style={header_style}\n                                        style={item_style}\n                                        plus\n                                    >\n                                        <Text mb=\"2rem\">\n                                            {localize(\n                                                'Let’s say you want to keep two lots of EUR/USD with a point value of 0.00001 and swap rate of -0.12 open for one night.',\n                                            )}\n                                        </Text>\n\n                                        <Show.Desktop>\n                                            <QueryImage\n                                                data={data.swap_forex_formula}\n                                                alt={localize('Swap forex formula')}\n                                            />\n                                        </Show.Desktop>\n                                        <Show.Mobile>\n                                            <QueryImage\n                                                data={data.swap_forex_formula_mobile}\n                                                alt={localize('Swap forex formula mobile')}\n                                            />\n                                        </Show.Mobile>\n                                        <FormulaText>\n                                            <StyledOl>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"One standard lot for Forex = 100,000 units\" />\n                                                    </span>\n                                                </li>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"The point value is derivied from the current digits of the asset. In this example, the digit is 5, so the point value is 0.00001.\" />\n                                                    </span>\n                                                </li>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"If the swap rate is positive, your account will be credited with the swap amount. If it is negative, your account will be debited.\" />\n                                                    </span>\n                                                </li>\n                                            </StyledOl>\n                                        </FormulaText>\n\n                                        <Text mt=\"1.6rem\">\n                                            <Localize\n                                                translate_text=\"So you will require a swap charge of <0>0.24 USD</0> to keep the position open for one night.\"\n                                                components={[<strong key={0} />]}\n                                            />\n                                        </Text>\n                                    </AccordionItem>\n                                </Accordion>\n                                <LinkWrapper height=\"auto\">\n                                    <StyledLinkButton\n                                        tertiary=\"true\"\n                                        type=\"mt5\"\n                                        external=\"true\"\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                    >\n                                        {localize('Go to Deriv MT5 dashboard')}\n                                    </StyledLinkButton>\n                                    <StyledLinkButton secondary=\"true\" to=\"/trade-types/cfds/\">\n                                        {localize('Learn more about swap')}\n                                    </StyledLinkButton>\n                                </LinkWrapper>\n                            </RightContent>\n                        </ContentContainer>\n                    </>\n                )}\n            </StyledSection>\n        </>\n    )\n}\n\nexport default SwapCalculator\n","import React from 'react'\nimport { Hero } from '../common/_style'\nimport SwapCalculatorSection from './_swap-calculator'\nimport { Container, SEO } from 'components/containers'\nimport { Header } from 'components/elements'\nimport { localize, WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\n\nconst SwapCalculator = () => {\n    return (\n        <Layout>\n            <SEO title={localize('Swap Calculator')} description={localize('Swap Calculator')} />\n            <Hero jc=\"center\" ai=\"center\">\n                <Container>\n                    <Header as=\"h1\" type=\"display-title\" color=\"white\" align=\"center\">\n                        {localize('Swap Calculator')}\n                    </Header>\n                </Container>\n            </Hero>\n            <SwapCalculatorSection />\n        </Layout>\n    )\n}\nexport default WithIntl()(SwapCalculator)\n"],"names":["VolumeField","values","setFieldValue","touched","errors","handleBlur","setFieldError","setFieldTouched","name","value","volume","onChange","field","id","type","label","localize","autoComplete","error","onBlur","handleError","current_input","focus","maxLength","getMaxLength","background","SwapRateField","swapRate","swap_currency_change_handler","getCurrency","getContractSize","StyledInputGroup","styled","InputGroup","data","useStaticQuery","useState","tab","setTab","onTabClick","t","jc","ai","to","color","src","RightArrow","alt","height","width","style","margin","direction","as","align","weight","mt","mb","tablet","active","onClick","size","enableReinitialize","initialValues","swapCharge","swapChargeSymbol","symbol","optionList","syntheticItemLists","contractSize","assetPrice","validate","resetValidationSynthetic","onSubmit","getSwapChargeSynthetic","numberSubmitFormat","numberSubmitFormatNegative","isValid","dirty","htmlFor","option_list","default_option","optionItemDefault","selected_option","secondary","disabled","translate_text","components","key","has_single_state","header","header_style","item_style","plus","swap_synthetic_formula","swap_synthetic_formula_mobile","tertiary","external","target","rel","financialItemLists","pointValue","resetValidationForex","getSwapChargeForex","swap_forex_formula","swap_forex_formula_mobile","WithIntl","title","description"],"sourceRoot":""}