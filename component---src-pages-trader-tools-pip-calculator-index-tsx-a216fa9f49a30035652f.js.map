{"version":3,"file":"component---src-pages-trader-tools-pip-calculator-index-tsx-a216fa9f49a30035652f.js","mappings":"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","sources":["webpack://deriv-com/./src/pages/trader-tools/pip-calculator/_pip-calculator.tsx","webpack://deriv-com/./src/pages/trader-tools/pip-calculator/index.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Formik, Field } from 'formik'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport {\n    getPipValue,\n    resetValidationPip,\n    getCurrency,\n    getContractSize,\n    numberSubmitFormat,\n    getMaxLength,\n} from '../common/_utility'\nimport {\n    optionItemDefault,\n    syntheticItemLists,\n    financialItemLists,\n} from '../common/_underlying-data'\nimport {\n    BreadCrumbContainer,\n    CalculateButton,\n    CalculatorBody,\n    CalculatorDropdown,\n    CalculatorForm,\n    CalculatorHeader,\n    CalculatorLabel,\n    CalculatorOutputContainer,\n    CalculatorOutputField,\n    CalculatorOutputSymbol,\n    CalculatorTabItem,\n    ContentContainer,\n    FormWrapper,\n    header_style,\n    InputGroup,\n    item_style,\n    LinkWrapper,\n    RightContent,\n    SectionSubtitle,\n    StyledLinkButton,\n    StyledSection,\n    FormulaText,\n    StyledOl,\n} from '../common/_style'\nimport {\n    Accordion,\n    AccordionItem,\n    Header,\n    LocalizedLinkText,\n    QueryImage,\n    Text,\n} from 'components/elements'\nimport Input from 'components/form/input'\nimport RightArrow from 'images/svg/tools/black-right-arrow.svg'\nimport { Flex, Show } from 'components/containers'\nimport { localize, Localize } from 'components/localization'\n\nconst PipCalculator = () => {\n    const query = graphql`\n        query {\n            pip_value_formula: file(relativePath: { eq: \"trade-tools/pip-value-formula.png\" }) {\n                ...fadeIn\n            }\n            pip_value_forex_formula: file(\n                relativePath: { eq: \"trade-tools/pip-value-forex-formula.png\" }\n            ) {\n                ...fadeIn\n            }\n            pip_value_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/pip-value-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n            pip_value_forex_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/pip-value-forex-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n        }\n    `\n    const data = useStaticQuery(query)\n\n    const [tab, setTab] = useState('Synthetic')\n\n    const onTabClick = (t) => {\n        setTab(t)\n    }\n\n    return (\n        <>\n            <BreadCrumbContainer>\n                <Flex jc=\"flex-start\" ai=\"center\">\n                    <LocalizedLinkText to=\"/trader-tools/\" color=\"grey-5\">\n                        {localize(\"Traders' tools\")}\n                    </LocalizedLinkText>\n                    <img\n                        src={RightArrow}\n                        alt={localize('right arrow')}\n                        height=\"16\"\n                        width=\"16\"\n                        style={{ margin: '0 8px' }}\n                    />\n                    <Text>{localize('Pip calculator')}</Text>\n                </Flex>\n            </BreadCrumbContainer>\n            <StyledSection direction=\"column\">\n                <SectionSubtitle as=\"h3\" type=\"sub-section-title\" align=\"center\" weight=\"normal\">\n                    {localize(\n                        'Our pip calculator helps you to estimate the pip value in your trades so that you can better manage your risk.',\n                    )}\n                </SectionSubtitle>\n\n                <ContentContainer mt=\"8rem\" mb=\"4rem\">\n                    <FormWrapper>\n                        <Formik\n                            enableReinitialize\n                            initialValues={{\n                                accountType: 'Synthetic',\n                                margin: 0,\n                                marginSymbol: 'USD',\n                                symbol: '',\n                                volume: '',\n                                pointValue: '',\n                                optionList: syntheticItemLists,\n                                contractSize: '',\n                            }}\n                            validate={resetValidationPip}\n                            onSubmit={(values, { setFieldValue }) => {\n                                setFieldValue('margin', getPipValue(values))\n                                setFieldValue('volume', numberSubmitFormat(values.volume))\n                                setFieldValue('pointValue', numberSubmitFormat(values.pointValue))\n                            }}\n                        >\n                            {({\n                                values,\n                                setFieldValue,\n                                setFieldError,\n                                setFieldTouched,\n                                handleBlur,\n                                errors,\n                                touched,\n                                setErrors,\n                                resetForm,\n                                isValid,\n                                dirty,\n                            }) => (\n                                <CalculatorForm>\n                                    <CalculatorHeader>\n                                        <CalculatorLabel htmlFor=\"message\">\n                                            {localize('Pip value')}\n                                        </CalculatorLabel>\n                                        <CalculatorOutputContainer>\n                                            <CalculatorOutputField>\n                                                {values.margin}\n                                            </CalculatorOutputField>\n                                            <CalculatorOutputSymbol>\n                                                {values.marginSymbol}\n                                            </CalculatorOutputSymbol>\n                                        </CalculatorOutputContainer>\n                                    </CalculatorHeader>\n\n                                    <CalculatorBody>\n                                        <CalculatorLabel>\n                                            {localize('Account type')}\n                                        </CalculatorLabel>\n                                        <Flex\n                                            mb=\"3rem\"\n                                            mt=\"1rem\"\n                                            jc=\"space-between\"\n                                            tablet={{ height: 'unset' }}\n                                        >\n                                            <CalculatorTabItem\n                                                active={tab === 'Synthetic'}\n                                                onClick={() => {\n                                                    onTabClick('Synthetic')\n                                                    setErrors({})\n                                                    resetForm({})\n                                                }}\n                                            >\n                                                <Text align=\"center\">{localize('Synthetic')}</Text>\n                                            </CalculatorTabItem>\n                                            <CalculatorTabItem\n                                                active={tab === 'Financial'}\n                                                disabled={tab === 'Financial'}\n                                                onClick={() => {\n                                                    onTabClick('Financial')\n                                                    setErrors({})\n                                                    resetForm({})\n                                                    setFieldValue('accountType', 'Financial')\n                                                    setFieldValue('optionList', financialItemLists)\n                                                }}\n                                            >\n                                                <Text align=\"center\">{localize('Financial')}</Text>\n                                            </CalculatorTabItem>\n                                        </Flex>\n\n                                        <CalculatorDropdown\n                                            option_list={values.optionList}\n                                            label={localize('Symbol')}\n                                            default_option={optionItemDefault}\n                                            selected_option={values.symbol}\n                                            id=\"symbol\"\n                                            onChange={(value) => {\n                                                setFieldValue('marginSymbol', getCurrency(value))\n                                                setFieldValue(\n                                                    'contractSize',\n                                                    getContractSize(value),\n                                                )\n                                                setFieldValue('symbol', value)\n                                            }}\n                                            error={touched.symbol && errors.symbol}\n                                            onBlur={handleBlur}\n                                            autocomplete=\"off\"\n                                            contractSize={values.contractSize}\n                                        />\n\n                                        <InputGroup>\n                                            <Field\n                                                name=\"volume\"\n                                                value={values.volume}\n                                                onChange={(value) => {\n                                                    setFieldValue('volume', value)\n                                                }}\n                                            >\n                                                {({ field }) => (\n                                                    <Input\n                                                        {...field}\n                                                        id=\"volume\"\n                                                        type=\"text\"\n                                                        label={localize('Volume')}\n                                                        autoComplete=\"off\"\n                                                        error={touched.volume && errors.volume}\n                                                        onBlur={handleBlur}\n                                                        handleError={(current_input) => {\n                                                            setFieldValue('volume', '', false)\n                                                            setFieldError('volume', '')\n                                                            setFieldTouched('volume', false, false)\n                                                            current_input.focus()\n                                                        }}\n                                                        maxLength={getMaxLength(values.volume, 8)}\n                                                        background=\"white\"\n                                                    />\n                                                )}\n                                            </Field>\n                                        </InputGroup>\n\n                                        <InputGroup>\n                                            <Field\n                                                name=\"pointValue\"\n                                                value={values.pointValue}\n                                                onChange={(value) => {\n                                                    setFieldValue('pointValue', value)\n                                                }}\n                                            >\n                                                {({ field }) => (\n                                                    <Input\n                                                        {...field}\n                                                        id=\"pointValue\"\n                                                        type=\"text\"\n                                                        label={localize('Point Value')}\n                                                        autoComplete=\"off\"\n                                                        error={\n                                                            touched.pointValue && errors.pointValue\n                                                        }\n                                                        onBlur={handleBlur}\n                                                        handleError={(current_input) => {\n                                                            setFieldValue('pointValue', '', false)\n                                                            setFieldError('pointValue', '')\n                                                            setFieldTouched(\n                                                                'pointValue',\n                                                                false,\n                                                                false,\n                                                            )\n                                                            current_input.focus()\n                                                        }}\n                                                        maxLength={getMaxLength(\n                                                            values.pointValue,\n                                                            15,\n                                                        )}\n                                                        background=\"white\"\n                                                    />\n                                                )}\n                                            </Field>\n                                        </InputGroup>\n                                        <Flex mt=\"3rem\">\n                                            <CalculateButton\n                                                secondary\n                                                type=\"submit\"\n                                                disabled={!isValid || !dirty}\n                                            >\n                                                {localize('Calculate')}\n                                            </CalculateButton>\n                                        </Flex>\n                                    </CalculatorBody>\n                                </CalculatorForm>\n                            )}\n                        </Formik>\n                    </FormWrapper>\n\n                    <RightContent>\n                        <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                            {localize('How to calculate pip value')}\n                        </Header>\n\n                        <Text>\n                            {localize(\n                                'The pip value for a contract on DMT5 is calculated based on this formula:',\n                            )}\n                        </Text>\n                        <Text mb=\"1.6rem\">\n                            <Localize\n                                translate_text=\"<0>Pip value = point value × volume × contract size</0>\"\n                                components={[<strong key={0} />]}\n                            />\n                        </Text>\n\n                        <Text mb=\"1.6rem\">\n                            {localize(\n                                'For synthetic accounts, the pip value is calculated in USD.',\n                            )}\n                        </Text>\n                        <Text mb=\"40px\">\n                            {localize(\n                                'For financial accounts, the pip value is in the quote currency for forex pairs.',\n                            )}\n                        </Text>\n\n                        <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                            {localize('Example calculation')}\n                        </Header>\n\n                        <Accordion has_single_state>\n                            <AccordionItem\n                                header={localize('Pip value for synthetic indices')}\n                                header_style={header_style}\n                                style={item_style}\n                                plus\n                            >\n                                <Text mb=\"16px\">\n                                    {localize(\n                                        'Let’s say you want to trade 1 lot of Volatility 75 Index.',\n                                    )}\n                                </Text>\n\n                                <Show.Desktop>\n                                    <QueryImage\n                                        data={data.pip_value_formula}\n                                        alt={localize('Margin formula')}\n                                    />\n                                    <QueryImage data={data.pip_info} alt={localize('Pip Info')} />\n                                </Show.Desktop>\n\n                                <Show.Mobile>\n                                    <QueryImage\n                                        data={data.pip_value_formula_mobile}\n                                        alt={localize('Margin formula mobile')}\n                                    />\n                                    <QueryImage\n                                        data={data.pip_info_mobile}\n                                        alt={localize('Pip Info')}\n                                    />\n                                </Show.Mobile>\n                                <FormulaText>\n                                    <StyledOl>\n                                        <li>\n                                            <span>\n                                                {localize(\n                                                    'The point value is derived from the current digits of the assets. In the example, the digit is 2, so the point value is 0.01.',\n                                                )}\n                                            </span>\n                                        </li>\n                                        <li>\n                                            <span>\n                                                {localize(\n                                                    'The contract size is one standard lot of Volatility 75 index = 1',\n                                                )}\n                                            </span>\n                                        </li>\n                                    </StyledOl>\n                                </FormulaText>\n                                <Text mb=\"1.6rem\" mt=\"1.6rem\">\n                                    <Localize\n                                        translate_text=\"So your pip value is <0>0.01 USD</0>.\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n                            </AccordionItem>\n                            <AccordionItem\n                                header={localize('Pip value for forex')}\n                                header_style={header_style}\n                                style={item_style}\n                                plus\n                            >\n                                <Text mb=\"16px\">\n                                    {localize('Let’s say you want to trade 2 lots of EUR/USD.')}\n                                </Text>\n\n                                <Show.Desktop>\n                                    <QueryImage\n                                        data={data.pip_value_forex_formula}\n                                        alt={localize('Pip Forex formula')}\n                                    />\n                                </Show.Desktop>\n\n                                <Show.Mobile>\n                                    <QueryImage\n                                        data={data.pip_value_forex_formula_mobile}\n                                        alt={localize('Pip Forex formula')}\n                                    />\n                                </Show.Mobile>\n\n                                <FormulaText>\n                                    <StyledOl>\n                                        <li>\n                                            <span>\n                                                {localize(\n                                                    'The point value is derived from the current digits of the assets. In the example, the digit is 5, so the point value is 0.00001.',\n                                                )}\n                                            </span>\n                                        </li>\n                                        <li>\n                                            <span>\n                                                {localize(\n                                                    'One standard lot of forex = 100,000 units',\n                                                )}\n                                            </span>\n                                        </li>\n                                    </StyledOl>\n                                </FormulaText>\n\n                                <Text mb=\"1.6rem\" mt=\"1.6rem\">\n                                    <Localize\n                                        translate_text=\"So your pip value is <0>2 USD</0>.\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n                            </AccordionItem>\n                        </Accordion>\n\n                        <LinkWrapper>\n                            <StyledLinkButton\n                                secondary=\"true\"\n                                type=\"mt5\"\n                                external=\"true\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                {localize('Go to Deriv MT5 dashboard')}\n                            </StyledLinkButton>\n                        </LinkWrapper>\n                    </RightContent>\n                </ContentContainer>\n            </StyledSection>\n        </>\n    )\n}\n\nexport default PipCalculator\n","import React from 'react'\nimport { Hero } from '../common/_style'\nimport PipCalculatorSection from './_pip-calculator'\nimport { Container, SEO } from 'components/containers'\nimport { Header } from 'components/elements'\nimport { localize, WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\n\nconst PipCalculator = () => {\n    return (\n        <Layout>\n            <SEO title={localize('Pip Calculator')} description={localize('Pip Calculator')} />\n            <Hero jc=\"center\" ai=\"center\">\n                <Container>\n                    <Header as=\"h1\" type=\"display-title\" color=\"white\" align=\"center\">\n                        {localize('Pip Calculator')}\n                    </Header>\n                </Container>\n            </Hero>\n            <PipCalculatorSection />\n        </Layout>\n    )\n}\nexport default WithIntl()(PipCalculator)\n"],"names":["data","useStaticQuery","useState","tab","setTab","onTabClick","t","jc","ai","to","color","localize","src","RightArrow","alt","height","width","style","margin","direction","as","type","align","weight","mt","mb","enableReinitialize","initialValues","accountType","marginSymbol","symbol","volume","pointValue","optionList","syntheticItemLists","contractSize","validate","resetValidationPip","onSubmit","values","setFieldValue","getPipValue","numberSubmitFormat","setFieldError","setFieldTouched","handleBlur","errors","touched","setErrors","resetForm","isValid","dirty","htmlFor","tablet","active","onClick","disabled","financialItemLists","option_list","label","default_option","optionItemDefault","selected_option","id","onChange","value","getCurrency","getContractSize","error","onBlur","autocomplete","name","field","autoComplete","handleError","current_input","focus","maxLength","getMaxLength","background","secondary","translate_text","components","key","has_single_state","header","header_style","item_style","plus","pip_value_formula","pip_info","pip_value_formula_mobile","pip_info_mobile","pip_value_forex_formula","pip_value_forex_formula_mobile","external","target","rel","WithIntl","title","description"],"sourceRoot":""}