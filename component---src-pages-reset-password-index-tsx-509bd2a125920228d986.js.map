{"version":3,"file":"component---src-pages-reset-password-index-tsx-509bd2a125920228d986.js","mappings":"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","sources":["webpack://deriv-com/./src/common/validation.js","webpack://deriv-com/./src/pages/reset-password/index.tsx"],"sourcesContent":["import { localize } from 'components/localization'\n\nconst validation_regex = {\n    email: /^[a-zA-Z0-9_.+-]+@((?:[\\w]+\\.)+)([a-zA-Z]{2,63}$)/,\n    url: /^[\\w|\\-|.]+$/,\n    alphabetic: /^[a-zA-Z]+$/,\n    number: /^\\d+$/,\n}\n\nconst validation = {\n    // Validation will return a string for error message\n    email: (input, message) => {\n        if (!validation_regex.email.test(input)) {\n            return message ? message : localize('Email is required')\n        } else {\n            return null\n        }\n    },\n    name: (input, message) => {\n        if (!input) {\n            return message ? message : localize('Name is required')\n        } else {\n            return null\n        }\n    },\n    required: (input, message) => {\n        if (!input) {\n            return message ? message : localize('This field is required')\n        } else {\n            return null\n        }\n    },\n    url: (input, message) => {\n        if (!validation_regex.url.test(input)) {\n            return message ? message : localize('Please enter a valid URL format')\n        } else {\n            return null\n        }\n    },\n    number: (input, message) => {\n        if (!validation_regex.number.test(input)) {\n            return message ? message : localize('Please enter a valid number')\n        } else {\n            return null\n        }\n    },\n    alphabetic: (input, message) => {\n        if (!validation_regex.alphabetic.test(input)) {\n            return message ? message : localize('Please enter only alphabetic characters')\n        } else {\n            return null\n        }\n    },\n}\n\nexport default validation\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Formik, Form } from 'formik'\nimport Layout from 'components/layout/layout'\nimport { localize, WithIntl } from 'components/localization'\nimport { Container, SEO } from 'components/containers'\nimport { Header, Text } from 'components/elements'\nimport { Input, Button } from 'components/form'\nimport validation from 'common/validation'\nimport { trimSpaces } from 'common/utility'\nimport { BinarySocketBase } from 'common/websocket/socket_base'\nimport Login from 'common/login'\n\ntype EmailType = { email: string }\n\ntype ErrorType = Partial<EmailType>\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n    height: 100vh;\n    padding: auto 0;\n    justify-content: start;\n`\n\nconst ButtonContainer = styled.div`\n    margin-top: 2rem;\n`\n\nconst InputGroup = styled.div`\n    width: 40rem;\n    margin: 0 auto 3.4rem;\n`\n\nconst StyledButton = styled(Button)`\n    margin: 0.8rem 0.4rem;\n`\n\nconst resetValidation = (values: EmailType) => {\n    const errors: ErrorType = {}\n    const email = trimSpaces(values.email)\n    const email_error = validation.required(email) || validation.email(email)\n\n    if (email_error) {\n        errors.email = email_error\n    }\n\n    return errors\n}\n\nconst resetSubmission = (values: EmailType, actions) => {\n    const binary_socket = BinarySocketBase.init()\n\n    binary_socket.onopen = () => {\n        binary_socket.send(\n            JSON.stringify({ verify_email: trimSpaces(values.email), type: 'reset_password' }),\n        )\n    }\n    binary_socket.onmessage = (msg: { data: string }) => {\n        const response = JSON.parse(msg.data)\n        actions.setSubmitting(false)\n        if (response.error) {\n            actions.setStatus({\n                error: response.error.message,\n            })\n            return\n        }\n\n        actions.resetForm({ email: '' })\n        actions.setStatus({\n            success: localize(\n                'Please check your email and click on the link provided to reset your password.',\n            ),\n        })\n        binary_socket.close()\n    }\n}\n\nconst ResetPassword = () => {\n    const initialValues: EmailType = { email: '' }\n    return (\n        <Layout type=\"static\" margin_top=\"0\">\n            <SEO\n                title={localize('Reset password | Deriv')}\n                description={localize(\n                    'Forgot your Deriv password? Want to reset your password? Send us your email address and weâ€™ll email you the instructions.',\n                )}\n                no_index\n            />\n            <StyledContainer justify=\"center\" align=\"center\" direction=\"column\">\n                <Header as=\"h2\" type=\"page-title\" align=\"center\" mt=\"80px\">\n                    {localize('Reset password')}\n                </Header>\n                <Header\n                    as=\"h4\"\n                    type=\"sub-section-title\"\n                    align=\"center\"\n                    weight=\"500\"\n                    mt=\"0.5rem\"\n                    mb=\"3.8rem\"\n                >\n                    {localize(\"We'll email you instructions to reset your password.\")}\n                </Header>\n                <Formik\n                    initialValues={initialValues}\n                    initialStatus={{}}\n                    validate={resetValidation}\n                    onSubmit={resetSubmission}\n                >\n                    {({\n                        values,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                        resetForm,\n                        status,\n                    }) => (\n                        <Form noValidate>\n                            <InputGroup>\n                                <Input\n                                    id=\"dm-email-input\"\n                                    name=\"email\"\n                                    error={errors.email}\n                                    value={trimSpaces(values.email)}\n                                    handleError={resetForm}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    autoComplete=\"off\"\n                                    type=\"text\"\n                                    label={localize('Email')}\n                                    background=\"white\"\n                                    placeholder=\"example@email.com\"\n                                    data-lpignore=\"true\"\n                                    required\n                                />\n                            </InputGroup>\n                            <Text align=\"center\" color=\"red\">\n                                {status.error}\n                            </Text>\n                            <Text align=\"center\" color=\"green\">\n                                {status.success}\n                            </Text>\n                            <ButtonContainer>\n                                <StyledButton\n                                    id=\"dm-pass-reset-login-link\"\n                                    tertiary\n                                    onClick={Login.redirectToLogin}\n                                    type=\"button\"\n                                >\n                                    {localize('Return to log in')}\n                                </StyledButton>\n                                <StyledButton\n                                    id=\"dm-pass-reset-button\"\n                                    secondary=\"true\"\n                                    disabled={isSubmitting}\n                                    type=\"submit\"\n                                >\n                                    {localize('Reset my password')}\n                                </StyledButton>\n                            </ButtonContainer>\n                        </Form>\n                    )}\n                </Formik>\n            </StyledContainer>\n        </Layout>\n    )\n}\n\nexport default WithIntl()(ResetPassword)\n"],"names":["validation_regex","email","url","alphabetic","number","validation","input","message","test","localize","name","required","StyledContainer","styled","Container","ButtonContainer","InputGroup","StyledButton","Button","resetValidation","values","errors","trimSpaces","email_error","resetSubmission","actions","binary_socket","BinarySocketBase","onopen","send","JSON","stringify","verify_email","type","onmessage","msg","response","parse","data","setSubmitting","error","setStatus","resetForm","success","close","WithIntl","margin_top","title","description","no_index","justify","align","direction","as","mt","weight","mb","initialValues","initialStatus","validate","onSubmit","handleChange","handleBlur","isSubmitting","status","noValidate","id","value","handleError","onChange","onBlur","autoComplete","label","background","placeholder","color","tertiary","onClick","Login","secondary","disabled"],"sourceRoot":""}